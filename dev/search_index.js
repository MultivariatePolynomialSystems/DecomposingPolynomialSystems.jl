var documenterSearchIndex = {"docs":
[{"location":"symmetries/deck/#Deck-transformations","page":"Deck transformations","title":"Deck transformations","text":"","category":"section"},{"location":"symmetries/deck/","page":"Deck transformations","title":"Deck transformations","text":"Deck transformations of a parametric polynomial system are the birational maps that fix the parameters of the polynomial system.","category":"page"},{"location":"symmetries/deck/#Computing-deck-transformations","page":"Deck transformations","title":"Computing deck transformations","text":"","category":"section"},{"location":"symmetries/deck/","page":"Deck transformations","title":"Deck transformations","text":"symmetries_fixing_parameters","category":"page"},{"location":"symmetries/deck/#DecomposingPolynomialSystems.symmetries_fixing_parameters","page":"Deck transformations","title":"DecomposingPolynomialSystems.symmetries_fixing_parameters","text":"symmetries_fixing_parameters(F::System; degree_bound=1, param_dep=true, kwargs...)\n\nGiven a polynomial system F returns the group of symmetries  of F that fix the parameters. The keyword argument degree_bound is used to set the upper bound for the degrees of numerator and denominator polynomials in expressions for the symmetries. The param_dep keyword argument specifies whether to consider functions of the symmetries to be dependent on the parameters of F.\n\njulia> @var x[1:2] p[1:2];\n\njulia> F = System([x[1]^2 - x[2]^2 - p[1], 2*x[1]*x[2] - p[2]]; variables=x, parameters=p);\n\njulia> symmetries_fixing_parameters(F; degree_bound=1, param_dep=false)\nDeckTransformationGroup of order 4\n structure: C2 x C2\n action:\n  1st map:\n   x₁ ↦ x₁\n   x₂ ↦ x₂\n  2nd map:\n   x₁ ↦ -x₁\n   x₂ ↦ -x₂\n  3rd map:\n   x₁ ↦ im*x₂\n   x₂ ↦ -im*x₁\n  4th map:\n   x₁ ↦ -im*x₂\n   x₂ ↦ im*x₁\n\n\n\n\n\n","category":"function"},{"location":"symmetries/deck/#DeckTranfromationGroup","page":"Deck transformations","title":"DeckTranfromationGroup","text":"","category":"section"},{"location":"symmetries/deck/","page":"Deck transformations","title":"Deck transformations","text":"DeckTransformationGroup","category":"page"},{"location":"symmetries/deck/#DecomposingPolynomialSystems.DeckTransformationGroup","page":"Deck transformations","title":"DecomposingPolynomialSystems.DeckTransformationGroup","text":"DeckTransformationGroup\n\nA DeckTransformationGroup is the result of deck transformations computation.\n\n\n\n\n\n","category":"type"},{"location":"symmetries/scalings/#Scaling-symmetries","page":"Scaling symmetries","title":"Scaling symmetries","text":"","category":"section"},{"location":"symmetries/scalings/","page":"Scaling symmetries","title":"Scaling symmetries","text":"Scaling symmetries of a (parametric) polynomial system are the maps that act by scaling individual variables of the formulation. ","category":"page"},{"location":"symmetries/scalings/#Computing-scaling-symmetries","page":"Scaling symmetries","title":"Computing scaling symmetries","text":"","category":"section"},{"location":"symmetries/scalings/","page":"Scaling symmetries","title":"Scaling symmetries","text":"scaling_symmetries","category":"page"},{"location":"symmetries/scalings/#DecomposingPolynomialSystems.scaling_symmetries","page":"Scaling symmetries","title":"DecomposingPolynomialSystems.scaling_symmetries","text":"scaling_symmetries(F::System)\n\nGiven a polynomial system F returns the group of scaling symmetries  of F. The scalings that change the parameters are considered as well.\n\njulia> @var x y a b c;\n\njulia> F = System([x^4+a^2+1, y^2+b+c]; variables=[x, y], parameters=[a,b,c]);\n\njulia> scaling_symmetries(F)\nScalingGroup isomorphic to ℤ × ℤ₄ × ℤ₂\n 1 free scaling:\n  y ↦ y*λ, b ↦ b*λ^2, c ↦ c*λ^2\n\n modular scalings:\n  1 of order 4:\n   x ↦ -im*x, y ↦ im*y, b ↦ -b, c ↦ -c\n  1 of order 2:\n   x ↦ -x, y ↦ -y, a ↦ -a\n\n\n\n\n\n","category":"function"},{"location":"symmetries/scalings/#ScalingGroup","page":"Scaling symmetries","title":"ScalingGroup","text":"","category":"section"},{"location":"symmetries/scalings/","page":"Scaling symmetries","title":"Scaling symmetries","text":"ScalingGroup","category":"page"},{"location":"symmetries/scalings/#DecomposingPolynomialSystems.ScalingGroup","page":"Scaling symmetries","title":"DecomposingPolynomialSystems.ScalingGroup","text":"ScalingGroup\n\nA ScalingGroup is the result of the scaling_symmetries computation.\n\n\n\n\n\n","category":"type"},{"location":"sampling/#Sampling-Polynomial-Systems","page":"Sampling Polynomial Systems","title":"Sampling Polynomial Systems","text":"","category":"section"},{"location":"sampling/","page":"Sampling Polynomial Systems","title":"Sampling Polynomial Systems","text":"In this Julia package we deal with parametric polynomial systems with finitely many solutions for generic parameters. We use HomotopyContinuation.jl to sample such polynomial systems.","category":"page"},{"location":"sampling/#Run-monodromy","page":"Sampling Polynomial Systems","title":"Run monodromy","text":"","category":"section"},{"location":"sampling/","page":"Sampling Polynomial Systems","title":"Sampling Polynomial Systems","text":"run_monodromy","category":"page"},{"location":"sampling/#DecomposingPolynomialSystems.run_monodromy","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.run_monodromy","text":"run_monodromy(F::Union{System, AbstractSystem}, xp₀=nothing; options...) -> SampledSystem\n\nRuns monodromy_solve on a given polynomial system F with starting solutions xp₀[1] and parameters xp₀[2] (if given).\n\njulia> @var x a b;\n\njulia> F = System([x^3+a*x+b]; variables=[x], parameters=[a,b]);\n\njulia> F = run_monodromy(F, ([[1]], [1,-2]); max_loops_no_progress = 10)\nSampledSystem with 3 samples\n 1 unknown: x\n 2 parameters: a, b\n\n number of solutions: 3\n sampled instances: 1\n\n\n\n\n\nrun_monodromy(F::SampledSystem, xp₀=nothing; options...) -> SampledSystem\n\nReruns monodromy_solve on a given sampled polynomial system F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#SampledSystem","page":"Sampling Polynomial Systems","title":"SampledSystem","text":"","category":"section"},{"location":"sampling/","page":"Sampling Polynomial Systems","title":"Sampling Polynomial Systems","text":"SampledSystem is a struct type that initially contains a polynomial system, the result of monodromy computations, and the solutions-parameters samples obtained with run_monodromy or sample!.","category":"page"},{"location":"sampling/","page":"Sampling Polynomial Systems","title":"Sampling Polynomial Systems","text":"unknowns\nparameters\nvariables\nnunknowns\nnparameters\nnvariables\nnsolutions\nsamples\nninstances\nnsamples\nmonodromy_permutations\nblock_partitions\ndeck_permutations","category":"page"},{"location":"sampling/#DecomposingPolynomialSystems.unknowns","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.unknowns","text":"unknowns(F::SampledSystem) -> Vector{Variable}\n\nReturns the vector of unknowns of F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#HomotopyContinuation.ModelKit.parameters","page":"Sampling Polynomial Systems","title":"HomotopyContinuation.ModelKit.parameters","text":"parameters(F::SampledSystem) -> Vector{Variable}\n\nReturns the vector of parameters of F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#DecomposingPolynomialSystems.variables","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.variables","text":"variables(F::SampledSystem) -> Vector{Variable}\n\nReturns the concatenated vector of unknowns and parameters of F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#DecomposingPolynomialSystems.nunknowns","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.nunknowns","text":"nunknowns(F::SampledSystem) -> Int\n\nReturns the number of unknowns of F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#HomotopyContinuation.ModelKit.nparameters","page":"Sampling Polynomial Systems","title":"HomotopyContinuation.ModelKit.nparameters","text":"nparameters(F::SampledSystem) -> Int\n\nReturns the number of parameters of F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#DecomposingPolynomialSystems.nvariables","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.nvariables","text":"nvariables(F::SampledSystem) -> Int\n\nReturns the number of variables of F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#HomotopyContinuation.nsolutions","page":"Sampling Polynomial Systems","title":"HomotopyContinuation.nsolutions","text":"nsolutions(F::SampledSystem) -> Int\n\nReturns the number of solutions of F for regular parameters.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#DecomposingPolynomialSystems.samples","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.samples","text":"samples(F::SampledSystem) -> Dict{Vector{Int}, Samples}\n\nReturns the dictionary of samples of a polynomial system F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#DecomposingPolynomialSystems.ninstances","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.ninstances","text":"ninstances(F::SampledSystem) -> Int\n\nReturns the number of sampled instances of F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#DecomposingPolynomialSystems.nsamples","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.nsamples","text":"nsamples(F::SampledSystem) -> Int\n\nReturns the number of samples of F. Notice that ninstances(F)*nsolutions(F) doesn't have to be equal to nsamples(F).\n\n\n\n\n\n","category":"function"},{"location":"sampling/#DecomposingPolynomialSystems.monodromy_permutations","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.monodromy_permutations","text":"monodromy_permutations(F::SampledSystem) -> Vector{Vector{Int}}\n\nReturns the vector of monodromy permutations of F obtained by run_monodromy.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#DecomposingPolynomialSystems.block_partitions","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.block_partitions","text":"block_partitions(F::SampledSystem) -> Vector{Vector{Vector{Int}}}\n\nReturns the vector of all block partitions of the solutions of F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#DecomposingPolynomialSystems.deck_permutations","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.deck_permutations","text":"deck_permutations(F::SampledSystem) -> Vector{Vector{Int}}\n\nReturns the vector of deck permutations of the solutions (actions of deck transformations on the solutions) of F.\n\n\n\n\n\n","category":"function"},{"location":"sampling/#Sample-system","page":"Sampling Polynomial Systems","title":"Sample system","text":"","category":"section"},{"location":"sampling/","page":"Sampling Polynomial Systems","title":"Sampling Polynomial Systems","text":"sample!","category":"page"},{"location":"sampling/#DecomposingPolynomialSystems.sample!","page":"Sampling Polynomial Systems","title":"DecomposingPolynomialSystems.sample!","text":"sample!(F::SampledSystem; path_ids=Vector(1:nsolutions(F)), n_instances=1) -> SampledSystem\n\nUses solve method to track the solutions of a poynomial system F with ids defined by path_ids to n_instances random parameters.\n\n\n\n\n\n","category":"function"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"DecomposingPolynomialSystems.jl is a Julia package for decomposing systems of polynomial equations, i.e. representing a possibly complicated polynomial system as an equivalent sequence of simpler polynomial systems.","category":"page"},{"location":"#Quick-start","page":"Introduction","title":"Quick start","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"TBW","category":"page"},{"location":"#Contents","page":"Introduction","title":"Contents","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"sampling.md\",\n]\nDepth = 2","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Computing symmetries","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"symmetries/scalings.md\",\n    \"symmetries/deck.md\",\n]\nDepth = 2","category":"page"}]
}
